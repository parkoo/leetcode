package main

// 思路： 寻找顺序对
// 下一个排列总是比当前排列要大，除非该排列已经是最大的排列
// 我们希望找到一种方法，能够找到一个大于当前序列的新序列，且变大的幅度尽可能小。具体地：
//	1.我们需要将一个左边的「较小数」与一个右边的「较大数」交换，以能够让当前排列变大，从而得到下一个排列。
//	2.同时我们要让这个「较小数」尽量靠右，而「较大数」尽可能小。当交换完成后，「较大数」右边的数需要按照升序重新排列。这样可以在保证新排列大于原来排列的情况下，使变大的幅度尽可能小。

// 时间复杂度：O(n)  空间复杂度：O(1)

func nextPermutation_2(nums []int) {

	// 从后向前寻找第一个相邻升序序对 nums[i] < nums[j], i尽可能靠后
	i, j := len(nums)-2, len(nums)-1
	for i >= 0 && nums[i] >= nums[j] {
		i--
		j--
	}

	// 此时，[j, len(nums)-1] 必定是降序的，如果中间有一个不是降序，则从后向前寻找第一个相邻升序对一定不是nums[i] < nums[j]
	// 从后向前寻找第一个大于nums[i]的数，并于i交换位置
	k := len(nums) - 1
	if i >= 0 {
		for nums[i] >= nums[k] {
			k--
		}
		nums[i], nums[k] = nums[k], nums[i]
	}

	//  [j, len(nums)-1]是降序的, 整体作翻转
	for i, j := j, len(nums)-1; i < j; {
		nums[i], nums[j] = nums[j], nums[i]
		i++
		j--
	}
}
