package main

// 思路: Brian Kernighan 算法, 计算两个数的二进制公共前缀

// 12: 00001 100
// 11: 00001 011
// 10: 00001 010
// 9:  00001 001

// 可以看到，对于连续的区间[9,12],公共二进制前缀是 00001, 而剩余尾部分别是连续的100、011、010、001（对应十进制4、3、2、1）
// 对连续区间[9,12]进行按位与运算，结果即等于公共二进制前缀

// 结论：对于连续的区间[m,n], 对所有数字执行按位与运算的结果是所有对应二进制字符串的公共前缀再用零补上后面的剩余位
// 故该题目可以转换为求m与n的二进制公共前缀

// 时间复杂度: O(logn)    空间复杂度: O(1)

func rangeBitwiseAnd(left int, right int) int {
	n := right
	for n > left {
		n = n & (n - 1)
	}

	return n
}
