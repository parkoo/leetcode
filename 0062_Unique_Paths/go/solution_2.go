package main

// 思路: 动态规划 一维空间
// 定义状态 dp[i][j] 表示机器人到达坐标 (i, j）时，可能走过的不同路径数, 到达该坐标时，可能从上方（i-1, j）过来或者从左方(i, j-1)过来
// 所以，dp[i][j] = dp[i-1][j] + dp[i][j-1]
// 注意设置状态的初值
// 由于当前状态只依赖上方和左方的状态，所以，只需要设置一维空间即可, 由于当前转台依赖当前行的左边的值，所以第二层循环从左向右遍历（需要先计算出左边的值）

// 时间复杂度: O(m*n)    空间复杂度: O(n)

func uniquePaths_2(m int, n int) int {
	dp := make([]int, n)

	// 设置初始状态
	for i := 0; i < n; i++ {
		dp[i] = 1
	}

	for i := 1; i < m; i++ {
		for j := 1; j < n; j++ {
			dp[j] = dp[j] + dp[j-1]
		}
	}

	return dp[n-1]
}
